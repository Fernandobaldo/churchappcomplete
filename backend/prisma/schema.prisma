generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id       String   @id @default(cuid())
  name     String
  logoUrl  String?
  branches Branch[]
}

model Branch {
  id           String         @id @default(cuid())
  name         String
  pastorName   String
  churchId     String
  church       Church         @relation(fields: [churchId], references: [id])
  members      Member[]
  Event        Event[]
  Transaction  Transaction[]
  Devotional   Devotional[]
  Notice       Notice[]
  Contribution Contribution[]
}

model Member {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  password       String
  birthDate      DateTime? // Novo campo
  phone          String? // Novo campo
  address        String? // Novo campo
  avatarUrl      String? // Novo campo
  role           Role             @default(MEMBER)
  branchId       String
  branch         Branch           @relation(fields: [branchId], references: [id])
  permissions    Permission[]
  Devotional     Devotional[]
  DevotionalLike DevotionalLike[]
}

model Permission {
  id       String @id @default(cuid())
  type     String
  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  @@unique([type, memberId])
}

model Event {
  id             String    @id @default(cuid())
  title          String
  description    String?
  startDate      DateTime
  endDate        DateTime?
  location       String
  branchId       String
  branch         Branch    @relation(fields: [branchId], references: [id])
  hasDonation    Boolean   @default(false)
  donationLink   String?
  donationReason String?
  imageUrl       String?
  time           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Transaction {
  id       String          @id @default(cuid())
  title    String
  amount   Float
  type     TransactionType
  category String?
  branchId String
  branch   Branch          @relation(fields: [branchId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  ENTRY
  EXIT
}

model Devotional {
  id        String           @id @default(cuid())
  title     String
  passage   String
  content   String?
  date      DateTime         @default(now())
  authorId  String
  author    Member           @relation(fields: [authorId], references: [id])
  likes     DevotionalLike[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  Branch    Branch?          @relation(fields: [branchId], references: [id])
  branchId  String?
}

model DevotionalLike {
  id           String   @id @default(cuid())
  devotionalId String
  userId       String
  createdAt    DateTime @default(now())

  devotional Devotional @relation(fields: [devotionalId], references: [id])
  user       Member     @relation(fields: [userId], references: [id])

  @@unique([devotionalId, userId])
}

model Notice {
  id       String   @id @default(cuid())
  title    String
  message  String
  branchId String
  branch   Branch   @relation(fields: [branchId], references: [id])
  viewedBy String[] // list of member IDs that read it

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contribution {
  id          String           @id @default(cuid())
  title       String
  description String?
  value       Float
  date        DateTime
  type        ContributionType
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  branchId String
  branch   Branch @relation(fields: [branchId], references: [id])
}

enum ContributionType {
  OFERTA
  DIZIMO
  OUTRO
}

enum Role {
  MEMBER
  COORDINATOR
  ADMINFILIAL
  ADMINGERAL
}
